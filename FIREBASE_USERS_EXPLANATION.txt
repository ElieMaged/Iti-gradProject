FIREBASE USERS EXPLANATION
==========================

This file explains what users are saved in your Firebase `users` collection and how the admin users page will display them.

## 🔥 FIREBASE USERS COLLECTION STRUCTURE

### **Users Collection (`/users/{uid}`)**
Every user who registers or logs in gets a document in the `users` collection with their UID as the document ID.

**Document Structure:**
```javascript
{
  email: "user@example.com",
  role: "user" | "admin" | "technician",
  createdAt: Timestamp
}
```

### **Technicians Collection (`/technicians/{uid}`)**
Technicians who register get an additional document in the `technicians` collection with their UID as the document ID.

**Document Structure:**
```javascript
{
  uid: "user_uid",
  fullName: "John Doe",
  email: "john@example.com",
  specialization: "Plumbing",
  experience: "5 years",
  bio: "Professional plumber...",
  basePrice: "100",
  government: "Cairo",
  district: "Maadi",
  willingToTravel: "Yes",
  idPhotoUrl: "base64_string",
  status: "pending",
  createdAt: Timestamp,
  updatedAt: Timestamp,
  role: "technician"
}
```

## 👥 TYPES OF USERS IN YOUR SYSTEM

### **1. Regular Users (User Role)**
- **Registration**: Via `UserSignUp.vue` or Google Sign-in
- **Storage**: Only in `users` collection
- **Role**: `"user"`
- **Data**: Email, role, creation date

### **2. Technicians (Technician Role)**
- **Registration**: Via `TechRegister.vue`
- **Storage**: In BOTH `users` collection AND `technicians` collection
- **Role**: `"technician"` (in users collection)
- **Data**: Full profile with specialization, experience, location, etc.

### **3. Admin Users (Admin Role)**
- **Special Case**: `elie1400674@gmail.com` is ALWAYS admin
- **Storage**: In `users` collection
- **Role**: `"admin"`
- **Data**: Email, role, creation date

## 📊 HOW ADMIN USERS PAGE WILL DISPLAY THEM

The admin users page will show **ALL USERS** from both collections:

### **From `users` Collection:**
```
User ID: abc123
Name: user@example.com (email as name)
Role: user/admin
Specialization: N/A
Location: N/A
Email: user@example.com
Contact: N/A
```

### **From `technicians` Collection:**
```
User ID: def456
Name: John Doe (fullName)
Role: technician
Specialization: Plumbing
Location: Cairo (government)
Email: john@example.com
Contact: N/A (phone field if available)
```

## 🎯 WHAT YOU'LL SEE IN ADMIN USERS PAGE

### **Example Display:**

| No | User | Role | Specialization | Location | Mail | Contact | Action |
|----|------|------|----------------|----------|------|---------|--------|
| 1 | 👤 user1@gmail.com | 🔴 Admin | N/A | N/A | user1@gmail.com | N/A | 👁️ 🗑️❌ |
| 2 | 👤 user2@gmail.com | 🟣 User | N/A | N/A | user2@gmail.com | N/A | 👁️ 🗑️ |
| 3 | 👤 John Doe | 🔵 Technician | Plumbing | Cairo | john@gmail.com | N/A | 👁️ 🗑️ |
| 4 | 👤 Sarah Smith | 🔵 Technician | Electrical | Alexandria | sarah@gmail.com | N/A | 👁️ 🗑️ |

### **Role Badges:**
- 🔴 **Admin**: Red badge (cannot be deleted)
- 🔵 **Technician**: Blue badge
- 🟣 **User**: Purple badge

## 🔍 SEARCH FUNCTIONALITY

The search will work across:
- User names (email for regular users, fullName for technicians)
- Email addresses
- Roles
- Specializations
- Locations

## 🗑️ DELETE FUNCTIONALITY

### **What Gets Deleted:**
1. **Regular Users**: Removed from `users` collection
2. **Technicians**: Removed from BOTH `users` AND `technicians` collections
3. **Admin Users**: Cannot be deleted (protected)

### **Delete Process:**
1. Confirmation dialog
2. Remove from `users` collection (if exists)
3. Remove from `technicians` collection (if exists)
4. Update UI immediately
5. Show success message

## 📈 EXPECTED USER TYPES IN YOUR SYSTEM

Based on your current setup, you should see:

### **Regular Users:**
- Users who signed up via `UserSignUp.vue`
- Users who signed in via Google
- Role: `"user"`

### **Technicians:**
- Users who registered via `TechRegister.vue`
- Role: `"technician"`
- Full profile with specialization, experience, etc.

### **Admin:**
- `elie1400674@gmail.com` (always admin)
- Role: `"admin"`

## 🚀 IMPLEMENTATION STATUS

✅ **Completed:**
- Fetch all users from both collections
- Display with role badges
- Search functionality
- Delete functionality (except admins)
- Pagination
- Error handling

✅ **Ready to Use:**
- Copy code from `ADMIN_USERS_IMPLEMENTATION.txt`
- Replace content of `src/views/adminDashboard/admin-users.vue`
- Test with your actual Firebase data

## 🔧 TECHNICAL NOTES

- **Firebase Auth Deletion**: Not implemented (requires server-side)
- **Real-time Updates**: Not implemented (would require Firestore listeners)
- **Bulk Operations**: Not implemented (single user deletion only)
- **Export Functionality**: Not implemented (could be added later)

The admin users page will give you complete visibility into all users in your system with full management capabilities! 