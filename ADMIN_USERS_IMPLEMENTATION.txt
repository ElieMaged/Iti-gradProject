ADMIN USERS IMPLEMENTATION
==========================

This file contains the complete updated admin-users.vue code that:
1. Fetches real users from Firestore (both regular users and technicians)
2. Displays all users with their roles, specializations, and contact info
3. Implements delete functionality that removes users from Firestore
4. Prevents deletion of admin users
5. Shows role badges with different colors for each role

Copy the entire code below and replace the content of src/views/adminDashboard/admin-users.vue:

<template>
  <div class="admin-dashboard-layout">
    <admin-sidebar />
    <div class="users-main">
      <div class="users-container">
        <h2 class="users-title">User Management</h2>
        <div class="subtitle-search-row">
          <div class="users-subtitle">All Users</div>
          <div class="search-wrapper">
            <input 
              type="text" 
              placeholder="Search" 
              v-model="searchQuery"
              class="search-input"
            />
            <span class="search-icon"><i class="fas fa-search"></i></span>
          </div>
        </div>
  
        <div class="table-wrapper">
          <table class="users-table">
            <thead>
              <tr class="table-header">
                <th>No</th>
                <th>User</th>
                <th>Role</th>
                <th>Specialization</th>
                <th>Location</th>
                <th>Mail</th>
                <th>Contact</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              <tr 
                v-for="(user, index) in paginatedUsers" 
                :key="user.id" 
                class="table-row"
              >
                <td>{{ (currentPage - 1) * itemsPerPage + index + 1 }}</td>
                <td class="user-cell">
                  <img :src="user.avatar || 'https://randomuser.me/api/portraits/men/1.jpg'" :alt="user.name" class="user-avatar">
                  {{ user.name }}
                </td>
                <td>
                  <span class="role-badge" :class="user.role">
                    {{ user.role }}
                  </span>
                </td>
                <td>{{ user.specialization || 'N/A' }}</td>
                <td>{{ user.location || 'N/A' }}</td>
                <td>{{ user.email }}</td>
                <td>{{ user.contact || 'N/A' }}</td>
                <td class="action-cell">
                  <a @click="viewUser(user)" class="action-btn view-btn">
                    <i class="fas fa-eye"></i>
                  </a>
                  <button @click="deleteUser(user)" class="action-btn delete-btn" :disabled="user.role === 'admin'">
                    <i class="fas fa-trash-alt"></i>
                  </button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
        
        <pagination
          :current-page="currentPage"
          :total-pages="totalPages"
          @prev-page="prevPage"
          @next-page="nextPage"
        />
        
      </div>
    </div>
  </div>
</template>
  
<script>
import AdminSidebar from '../../components/admin-sidebar.vue';
import Pagination from '../../components/pagination.vue';
import { collection, getDocs, doc, deleteDoc } from 'firebase/firestore';
import { db } from '../../firebase';
import { deleteUser as deleteAuthUser } from 'firebase/auth';
import { auth } from '../../firebase';

export default {
    name: 'AdminUsers',
    components: {
      AdminSidebar,
      Pagination
    },
    data() {
      return {
        searchQuery: '',
        currentPage: 1,
        itemsPerPage: 5,
        users: [],
        loading: true,
        error: null
      };
    },
    computed: {
      filteredUsers() {
        if (!this.searchQuery.trim()) return this.users;
        const q = this.searchQuery.toLowerCase();
        return this.users.filter(user =>
          Object.values(user).some(val => 
            val && String(val).toLowerCase().includes(q)
          )
        );
      },
      totalPages() {
        return Math.ceil(this.filteredUsers.length / this.itemsPerPage);
      },
      paginatedUsers() {
        const start = (this.currentPage - 1) * this.itemsPerPage;
        const end = start + this.itemsPerPage;
        return this.filteredUsers.slice(start, end);
      }
    },
    async mounted() {
      await this.fetchAllUsers();
    },
    methods: {
      async fetchAllUsers() {
        try {
          this.loading = true;
          this.error = null;
          
          // Fetch regular users
          const usersCollection = collection(db, 'users');
          const usersSnapshot = await getDocs(usersCollection);
          const regularUsers = usersSnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data(),
            name: doc.data().email || 'Unknown User',
            avatar: 'https://randomuser.me/api/portraits/men/1.jpg',
            role: doc.data().role || 'user',
            specialization: 'N/A',
            location: 'N/A',
            contact: 'N/A'
          }));

          // Fetch technicians
          const techniciansCollection = collection(db, 'technicians');
          const techniciansSnapshot = await getDocs(techniciansCollection);
          const technicians = techniciansSnapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data(),
            name: doc.data().fullName || doc.data().name || 'Unknown Technician',
            avatar: 'https://randomuser.me/api/portraits/men/2.jpg',
            role: 'technician',
            specialization: doc.data().specialization || 'N/A',
            location: doc.data().government || doc.data().location || 'N/A',
            contact: doc.data().phone || 'N/A'
          }));

          // Combine all users
          this.users = [...regularUsers, ...technicians];
          
        } catch (error) {
          console.error('Error fetching users:', error);
          this.error = 'Failed to fetch users';
        } finally {
          this.loading = false;
        }
      },
      
      viewUser(user) {
        this.$router.push(`/admin-user-profile/${user.id}`);
      },
      
      async deleteUser(user) {
        if (user.role === 'admin') {
          alert('Cannot delete admin users');
          return;
        }

        if (!confirm(`Are you sure you want to delete ${user.name}? This action cannot be undone.`)) {
          return;
        }

        try {
          // Remove from users collection if exists
          try {
            const userDoc = doc(db, 'users', user.id);
            await deleteDoc(userDoc);
          } catch (error) {
            console.log('User not found in users collection or already deleted');
          }

          // Remove from technicians collection if exists
          try {
            const technicianDoc = doc(db, 'technicians', user.id);
            await deleteDoc(technicianDoc);
          } catch (error) {
            console.log('Technician not found in technicians collection or already deleted');
          }

          // Remove from Firebase Auth (this requires admin SDK, so we'll skip for now)
          // Note: Deleting from Firebase Auth requires server-side implementation
          // For now, we'll just remove from Firestore

          // Remove from local array
          const index = this.users.findIndex(u => u.id === user.id);
          if (index > -1) {
            this.users.splice(index, 1);
          }

          alert(`User ${user.name} has been deleted successfully`);
          
        } catch (error) {
          console.error('Error deleting user:', error);
          alert('Failed to delete user. Please try again.');
        }
      },
      
      prevPage() {
        if (this.currentPage > 1) {
          this.currentPage--;
        }
      },
      
      nextPage() {
        if (this.currentPage < this.totalPages) {
          this.currentPage++;
        }
      }
    },
    watch: {
      searchQuery() {
        this.currentPage = 1;
      }
    }
};
</script>

<style scoped>
.admin-dashboard-layout {
  display: flex;
  min-height: 100vh;
  font-family: 'Outfit', 'Segoe UI', Arial, sans-serif;
  background: #faf8fd;
}

.users-main {
  flex: 1;
  padding: 2.5rem;
}

.users-container {
  max-width: 80rem;
  margin: 0 auto;
}

.users-title {
  font-size: 2rem;
  font-weight: bold;
  color: #7c6bb0;
  margin-bottom: 0;
}

.subtitle-search-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1.5rem;
}

.users-subtitle {
  font-size: 1.2rem;
  font-weight: 600;
  color: #7c6bb0;
}

.search-wrapper {
  display: flex;
  align-items: center;
  width: 411px;
  height: 50px;
  padding: 10px;
  gap: 8px;
  flex-shrink: 0;
  margin-bottom: 16px;
  position: relative;
}

.search-input {
  width: 100%;
  height: 100%;
  border-radius: 48px;
  border: 1px solid var(--border-border-primary, #C2C3C4);
  background: var(--grey-50, #EAEAEA);
  font-size: 1rem;
  color: #6B5FA7;
  outline: none;
  padding: 0 16px 0 40px;
  transition: border 0.2s;
}

.search-input:focus {
  border: 1.5px solid #6B5FA7;
}

.search-icon {
  position: absolute;
  left: 16px;
  top: 50%;
  transform: translateY(-50%);
  color: #b6a7e6;
  font-size: 1.1rem;
}

.table-wrapper {
  overflow-x: auto;
  border-radius: 0.75rem;
  background: #fff;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.users-table {
  width: 100%;
  border-collapse: collapse;
  background: #fff;
  border-radius: 0.75rem;
}

.table-header {
  background: rgba(124, 107, 176, 0.2);
  color: #333;
}

.table-header th {
  padding: 0.75rem 1rem;
  text-align: left;
  font-weight: 600;
  font-size: 0.9rem;
}

.table-row {
  border-bottom: 1px solid #e5e7eb;
  transition: background-color 0.2s;
}

.table-row:hover {
  background: #ede7f6;
}

.table-row td {
  padding: 0.75rem 1rem;
  font-size: 0.9rem;
  color: #333;
}

.user-cell {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.user-avatar {
  width: 2rem;
  height: 2rem;
  border-radius: 50%;
  object-fit: cover;
}

.role-badge {
  padding: 0.25rem 0.75rem;
  border-radius: 1rem;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: capitalize;
}

.role-badge.admin {
  background: #fee2e2;
  color: #dc2626;
}

.role-badge.technician {
  background: #dbeafe;
  color: #2563eb;
}

.role-badge.user {
  background: #f3e8ff;
  color: #7c3aed;
}

.action-cell {
  display: flex;
  gap: 0.5rem;
}

.action-btn {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 0.25rem;
  transition: all 0.2s;
  font-size: 1rem;
}

.action-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.view-btn {
  color: #3b82f6;
}

.view-btn:hover {
  background: #dbeafe;
}

.delete-btn {
  color: #ef4444;
}

.delete-btn:hover:not(:disabled) {
  background: #fee2e2;
}

@media (max-width: 768px) {
  .users-main {
    padding: 1rem;
  }
  .subtitle-search-row {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }
  .search-wrapper {
    width: 100%;
    max-width: none;
  }
  .table-wrapper {
    font-size: 0.8rem;
  }
  .table-header th,
  .table-row td {
    padding: 0.5rem 0.5rem;
  }
}
</style>

FEATURES IMPLEMENTED:
====================

1. **Real User Fetching**: 
   - Fetches all users from 'users' collection in Firestore
   - Fetches all technicians from 'technicians' collection in Firestore
   - Combines both lists into a single table

2. **Role Display**:
   - Shows user roles (admin, technician, user) with colored badges
   - Admin: Red badge
   - Technician: Blue badge  
   - User: Purple badge

3. **Delete Functionality**:
   - Deletes users from both 'users' and 'technicians' collections
   - Prevents deletion of admin users
   - Shows confirmation dialog before deletion
   - Updates the UI immediately after successful deletion

4. **Search Functionality**:
   - Searches across all user fields
   - Updates pagination when search query changes

5. **Data Mapping**:
   - Maps Firestore field names to display names
   - Handles missing data with 'N/A' fallbacks
   - Uses appropriate avatar images for different user types

6. **Error Handling**:
   - Graceful error handling for Firestore operations
   - User-friendly error messages
   - Console logging for debugging

NOTES:
======
- Firebase Auth deletion requires server-side implementation (Firebase Admin SDK)
- For now, users are only deleted from Firestore collections
- Admin users cannot be deleted (protected)
- All users from both collections are displayed in a unified table 